/// <reference types="node" />
import type { APIClientUser, APIDevice } from '@guildedjs/guilded-api-typings';
import { RestManager } from '@guildedjs/rest';
import { EventEmitter } from 'events';
import type { ClientOptions, LoginOptions } from '../typings';
import { ClientGatewayHandler } from '../ws/ClientGatewayHandler';
import { ChannelManager } from './managers/ChannelManager';
import { TeamManager } from './managers/TeamManager';
import { UserManager } from './managers/UserManager';
import type { Message, MessageReaction } from './Message';
import { User } from './User';
/**
 * The main class used to interact with the Guilded API
 *
 * ```javascript
 * const { Client } = require("@guildedjs/guilded.js");
 * const client = new Client();
 *
 * client.login({
 *  email: "email",
 *  password: "password"
 * })
 * ```
 */
export declare class Client extends EventEmitter implements clientEvents {
    readonly options?: Partial<ClientOptions> | undefined;
    /**
     * Manager in charge of managing REST requests to the guilded API
     * @private
     */
    readonly rest: RestManager;
    /**
     * Manager in charge of managing REST requests related to the guilded CDN
     * @private
     */
    readonly cdn: RestManager;
    /**
     * The User belonging to this Client
     * @readonly
     */
    user: ClientUser | null;
    /**
     * Handler in charge of handling gateway events and keeping the ws connection alive
     * @private
     */
    gateway: ClientGatewayHandler | null;
    /**
     * The teams that this client is in
     * @readonly
     */
    readonly teams: TeamManager;
    /**
     * The channels that this client can access
     * @readonly
     */
    readonly channels: ChannelManager;
    /**
     * The users belonging to anything handled by this client
     * @readonly
     */
    readonly users: UserManager;
    constructor(options?: Partial<ClientOptions> | undefined);
    /**
     * Login the client and establish a connection with the Guilded API
     * ```
     * <client>.login({
     *  "email": "email@domain.com",
     *  "password": "securepassword"
     * })
     * ```
     */
    login(options: LoginOptions): Promise<this>;
    /**
     * Set the password of this client.
     * @param newPassword the new password to set the current password to.
     */
    setPassword(newPassword: string): Promise<void>;
    /**
     * Destroy the current connection to the API
     * @param intentionToReconnect Whether or not you want the client to reconnect immediately. Used internally for handling WS disconnects
     */
    destroy(intentionToReconnect?: boolean): void;
    /**
     * Used to emit debug statements
     * @hidden
     */
    debug(str: string, ...args: unknown[]): undefined;
}
/**
 * The user belonging to this client
 */
export declare class ClientUser extends User {
    /**
     * List of users that this client has blocked
     */
    blockedUsers: unknown[];
    /**
     * Connections with other social media this client has
     */
    socialLinks: unknown[];
    /**
     * Badges this client owns
     */
    badges: string[];
    /**
     * The type of presence this client has
     */
    userPresenceStatus: number;
    /**
     * Information regarding the devices that have been used with this client
     */
    devices: APIDevice[];
    constructor(client: Client, data: APIClientUser);
    /**
     * Update the data in this structure
     * @internal
     */
    patch(data: APIClientUser): this;
    setPresence(presence: 'online' | 'idle' | 'dnd' | 'invisible'): Promise<this>;
    setUsername(newUsername: string): Promise<this>;
}
export interface clientEvents {
    /**
     * Fired when a reaction is removed from a message
     * @event
     */
    on(event: 'messageReactionDelete', listener: (reaction: MessageReaction, remover: User | string) => unknown): this;
    /**
     * Fired when a reaction is added to a message
     * @event
     */
    on(event: 'messageReactionAdd', listener: (reaction: MessageReaction, reacter: User | string) => unknown): this;
    /**
     * Fired when a message is sent
     * @event
     */
    on(event: 'messageCreate', listener: (message: Message) => unknown): this;
    /**
     * Fired when a message is updated
     * @event
     */
    on(event: 'messageUpdate', listener: (oldMessage: Message, newMessage: Message) => unknown): this;
    /**
     * Fired when client is confirmed destroyed with no reconnect
     * @event
     */
    on(event: 'disconnected', listener: () => unknown): this;
    /**
     * Fired when the client has a ready connection to the WS gateway
     * @event
     */
    on(event: 'ready', listener: () => unknown): this;
    /**
     * Fired on any event from the WS gateway that includes a payload and type 42
     * @event
     */
    on(event: 'raw', listener: (event_name: string, event_data: Record<string, unknown>) => unknown): this;
    /**
     * Fired in various different places, used for diagnostic purposes
     * @event
     */
    on(event: 'debug', listener: (...args: unknown[]) => unknown): this;
    /**
     * Fired when the WS is reconnecting
     * @event
     */
    on(event: 'reconnecting', listener: () => unknown): this;
}
//# sourceMappingURL=Client.d.ts.map