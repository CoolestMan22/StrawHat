import type { APIWebhook } from '@guildedjs/guilded-api-typings';
import { Base } from './Base';
import type { TeamChannel } from './Channel';
import type { Client } from './Client';
import type { Team } from './Team';
import type { User } from './User';
/**
 * Object representing received webhook data. This object is NOT to be used to send data to webhooks. That will be WebhookClient
 */
export declare class Webhook extends Base<APIWebhook> {
    private _channel;
    /**
     * The username belonging to this webhook
     */
    name: string;
    /**
     * The ID of the channel this webhook belongs to
     */
    channelID: string;
    /**
     * The ID of the team this webhook belongs to
     */
    teamID: string;
    /**
     * The URL of the avatar belonging to this webhook
     */
    iconURL: string | null;
    /**
     * The ID of the user who created this webhook
     */
    createdByID: string;
    /**
     * The date in which this webhook was created
     */
    createdAt: Date;
    /**
     * The date this webhook was deleted if it was deleted
     */
    deletedAt: Date | null;
    private _team;
    private _createdBy;
    constructor(client: Client, data: APIWebhook, _channel: TeamChannel | null);
    /**
     * The channel object this webhook belongs to if cached
     */
    get channel(): TeamChannel | null;
    /**
     * The User object of the user that created this webhook if cached
     */
    get createdBy(): User | null;
    /**
     * The team object this webhook belongs to if cached
     */
    get team(): Team | null;
    /**
     * Update the data in this structure
     * @internal
     */
    patch(data: APIWebhook | Partial<APIWebhook>): this;
}
//# sourceMappingURL=Webhook.d.ts.map