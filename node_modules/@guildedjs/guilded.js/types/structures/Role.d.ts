import type { APITeamChannelRolePermissionOverwrite, APITeamRole, RolePermissions } from '@guildedjs/guilded-api-typings';
import { Base } from './Base';
import type { TeamChannel } from './Channel';
import type { Client } from './Client';
import type { Team } from './Team';
/**
 * A role belonging to a team
 */
export declare class Role extends Base<APITeamRole> {
    private _team;
    /**
     * Whether this role is mentionable.
     */
    mentionable: boolean;
    /**
     * The base permissions this role has.
     */
    permissions: RolePermissions;
    /**
     * Whether this role is hoisted or not.
     */
    hoisted: boolean;
    /**
     * Discord sync'ed role info.
     */
    discord: {
        roleID: string | null;
        syncedAt: Date | null;
    };
    /**
     * Whether this role is self assignable by others.
     */
    selfAssignable: boolean;
    /**
     * Date this role was created on.
     * @readonly
     */
    readonly createdAt: Date;
    /**
     * ID of the team this role belongs to.
     */
    readonly teamID: string;
    /**
     * Date this role was last updated on.
     */
    updatedAt: Date | null;
    /**
     * The position of this role.
     */
    priority: number;
    /**
     * The color of this role.
     */
    color: string;
    /**
     * The name of this role.
     */
    name: string;
    constructor(client: Client, data: APITeamRole, _team: Team | null);
    get team(): Team | null;
    /**
     * Update the data in this structure
     * @internal
     */
    patch(data: APITeamRole | Partial<APITeamRole>): this;
}
/**
 * Object representing permission overwrites for a role on a team channel.
 */
export declare class RolePermissionOverwrite {
    client: Client;
    channel: TeamChannel;
    /**
     * The ID of the team this overwrite belongs to.
     */
    readonly teamID: string;
    /**
     * The ID of the channel this overwrite belongs to.
     */
    readonly channelID: string;
    /**
     * Date this overwrite was created on.
     */
    readonly createdAt: Date;
    /**
     * Date this overwrite was last updated on.
     */
    readonly updatedAt: Date | null;
    /**
     * The ID of the role this overwrite belongs to.
     */
    readonly teamRoleID: string;
    /**
     * The permissions this overwrite currently has denied.
     */
    readonly denyPermissions: RolePermissions;
    /**
     * The permissions this overwrite currently has allowed.
     */
    readonly allowPermissions: RolePermissions;
    constructor(client: Client, data: APITeamChannelRolePermissionOverwrite, channel: TeamChannel);
}
//# sourceMappingURL=Role.d.ts.map