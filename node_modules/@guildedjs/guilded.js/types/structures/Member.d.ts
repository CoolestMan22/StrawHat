import type { APIAboutInfo, APIAlias, APIMember, APISocialLink, APIUserStatus, MembershipRole } from '@guildedjs/guilded-api-typings';
import { Base } from './Base';
import type { Client } from './Client';
import { TeamMemberRoleManager } from './managers/TeamMemberRoleManager';
import type { Team } from './Team';
/**
 * A member of a team
 */
export declare class Member extends Base<APIMember> {
    team: Team | null;
    /**
     * The current username of this member
     */
    name: string;
    /**
     * The current nickname of this member in this team
     */
    nickname: string | null;
    /**
     * Badges belonging to this member
     */
    badges: string[] | null;
    /**
     * The date in which this member joined
     */
    joinDate: Date;
    /**
     * Unknown purpose
     */
    membershipRole: MembershipRole;
    /**
     * The last date in which this member was detected to be online
     */
    lastOnline: Date | null;
    /**
     * The profile picture belonging to this member
     */
    profilePicture: string | null;
    /**
     * The blurred out banner belonging to this member
     */
    profileBannerBlur: string | null;
    /**
     * Additional info regarding this member
     */
    aboutInfo: APIAboutInfo | null;
    /**
     * This members current detected status
     */
    userStatus: APIUserStatus;
    /**
     * Connections that this member has to other social media platforms
     */
    socialLinks: APISocialLink[] | null;
    /**
     * The IDs of the roles that this member has
     */
    roleIDs: number[] | null;
    /**
     * Unknown purpose
     */
    subscriptionType: string | null;
    /**
     * Aliases this member may have on games
     */
    aliases: APIAlias[];
    /**
     * Unknown purpose
     */
    userPresenceStatus: number;
    /**
     * The amount of XP this member has in this team
     */
    teamXp: number;
    /**
     * The manager in charge of managing the roles this member has
     */
    roles: TeamMemberRoleManager;
    constructor(client: Client, data: APIMember, team: Team | null);
    /**
     * Update the data in this structure
     * @internal
     */
    patch(data: APIMember | Partial<APIMember>): this;
    kick(): Promise<void>;
    setNickname(newNickname: string): Promise<void>;
}
//# sourceMappingURL=Member.d.ts.map