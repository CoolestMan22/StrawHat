import type { APIPartialTeam, APIPostCreateInviteResult, APITeam, CHANNEL_CONTENT_TYPES } from '@guildedjs/guilded-api-typings';
import { TeamChannel } from '../Channel';
import type { Client } from '../Client';
import { Group } from '../Group';
import { Member } from '../Member';
import { Role } from '../Role';
import { Team } from '../Team';
import { BaseManager } from './BaseManager';
export declare class TeamManager extends BaseManager<APITeam | APIPartialTeam, Team> {
    constructor(client: Client);
    static resolve(team: string | Team): string;
    /**
     * Add a role to a TeamMember
     * @param team The ID or team object of the Team the target member is in.
     * @param member The ID or member object of the Member that will have the role added to them.
     * @param role The ID or role object of the Role to add to the member.
     */
    addRoleToMember(team: string | Team, member: string | Member, role: string | Role): Promise<void>;
    /**
     * Remove a role from a TeamMember
     * @param team The ID or team object of the Team the target member is in.
     * @param member The ID or member object of the Member that will have the role removed from them.
     * @param role The ID or role object of the Role to remove from the member.
     */
    removeRoleFromMember(team: string | Team, member: string | Member, role: string | Role): Promise<void>;
    /**
     * Kick a TeamMember
     * @param team The ID or team object of the Team the target member is in.
     * @param member The ID or member object of the Member that will be kicked
     */
    kickMember(team: string | Team, member: string | Member): Promise<void>;
    /**
     * Set a TeamMember's name
     * @param team The ID or team object of the Team the target member is in.
     * @param member The ID or member object of the Member that will be renamed.
     * @param newNickname The new nickname to give to the Member.
     */
    setMemberNickname(team: string | Team, member: string | Member, newNickname: string): Promise<void>;
    /**
     * Creates an Invite for the Team
     * @param team The ID or team object of the Team.
     * @returns The ID of the created Invite
     */
    createInvite(team: string | Team): Promise<APIPostCreateInviteResult>;
    deleteInvite(team: string | Team, inviteID: string): Promise<string>;
    /**
     * Creates a Teamchannel
     * @param team
     * @param group
     * @param name
     * @param contentType
     * @param channelCategoryId
     * @param isPublic
     * @returns
     */
    createChannel(team: string | Team, group: string | Group, name: string, contentType: CHANNEL_CONTENT_TYPES, channelCategoryId?: number | null, isPublic?: boolean): Promise<TeamChannel>;
    /**
     * Fetch a team, will retrieve from cache if exists
     * @param id the ID of the team to fetch.
     * @param cache Whether to cache the fetched Team or not.
     */
    fetch(id: string, cache?: boolean): Promise<Team>;
}
//# sourceMappingURL=TeamManager.d.ts.map