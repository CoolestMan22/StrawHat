import Collection from '@discordjs/collection';
import type { APIMessage } from '@guildedjs/guilded-api-typings';
import { UpgradedMessageData } from '../../typings';
import type { DMChannel, PartialChannel, TeamChannel } from '../Channel';
import type { Client } from '../Client';
import { Message, PartialMessage } from '../Message';
import { BaseManager } from './BaseManager';
export declare class MessageManager extends BaseManager<APIMessage | UpgradedMessageData, Message> {
    readonly channel: TeamChannel | DMChannel | PartialChannel;
    constructor(client: Client, channel: TeamChannel | DMChannel | PartialChannel);
    static resolve(message: string | Message | PartialMessage): string;
    /**
     * Edit a message
     */
    edit(msg: string | Message, newContent: string): Promise<Message>;
    /**
     * Delete a message
     */
    delete(msg: string | Message): Promise<Message | string>;
    /**
     * Add a reaction to this message
     */
    react(message: string | Message, channel: string | PartialChannel, emoji: string): unknown;
    /**
     * Remove a reaction from this message
     */
    unreact(message: string | Message, channel: string | PartialChannel, emoji: string): unknown;
    /**
     * Fetch multiple messages from the channel this manager belongs to
     * @param amnt The amount of messages to fetch.
     * @param cache Whether to cache the fetched messages or not.
     */
    fetch(amnt: number, cache?: boolean): Promise<Collection<string, Message>>;
}
//# sourceMappingURL=MessageManager.d.ts.map