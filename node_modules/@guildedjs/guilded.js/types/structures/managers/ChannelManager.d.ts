import Embed from '@guildedjs/embeds';
import type { APITeamChannel } from '@guildedjs/guilded-api-typings';
import { DMChannel, PartialChannel, TeamChannel } from '../Channel';
import type { Client } from '../Client';
import { Message, PartialMessage } from '../Message';
import { BaseManager } from './BaseManager';
export declare class ChannelManager extends BaseManager<APITeamChannel, TeamChannel | DMChannel | PartialChannel> {
    constructor(client: Client);
    static resolve(channel: string | PartialChannel): string;
    /**
     * Send a message to a channel, using either the object or channel ID.
     * @param channel The ID or channel object of the target channel to send this message to
     */
    sendMessage(channel: string | PartialChannel, content: string | Embed, embed?: Embed): Promise<Message | string>;
    /**
     * Fetch a message from a channel from the API
     * @param channel The ID or channel object of the taret channel to fetch the message from.
     * @param message The ID, message object, or partial message object of the message to fetch.
     * @param cache Whether to cache the fetched message or not.
     */
    fetchMessage(channel: string | PartialChannel, message: string | Message | PartialMessage): Promise<Message>;
    /**
     * Delete a message from a channel.
     * @param channel The ID or channel object of the channel to delete the message from.
     * @param msg The ID or message object of the message to delete.
     */
    deleteMessage(channel: string | PartialChannel, msg: string | Message): Promise<Message | string>;
    /**
     * Edit a message
     * @hidden
     */
    editMessage(channel: string | PartialChannel, msg: string | Message, newContent: string): Promise<Message>;
}
//# sourceMappingURL=ChannelManager.d.ts.map