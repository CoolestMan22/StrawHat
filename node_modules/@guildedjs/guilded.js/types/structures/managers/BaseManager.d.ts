import { CacheCollection, CacheCollectionOptions } from '@guildedjs/common';
import type { BaseData, constructable } from '../../typings';
import { Base } from '../Base';
import type { Client } from '../Client';
/**
 * The manager in charge of cached objects and potential api endpoints
 * @param K The base amount of data required to construct object T
 * @param T The object that will be held in this manager
 */
export declare class BaseManager<K extends BaseData, T extends Base<K>> {
    readonly client: Client;
    readonly holds: constructable<T>;
    readonly cacheOptions?: CacheCollectionOptions | undefined;
    cache: CacheCollection<string, T>;
    constructor(client: Client, holds: constructable<T>, cacheOptions?: CacheCollectionOptions | undefined);
    /**
     * Add an object, potential data, or constructor params into this managers cache
     * @private
     */
    add(data: T | K | Partial<K> | ConstructorParameters<constructable<T>>): T | null;
    private isConstructorParamsOfHolds;
    private isInstanceOfHolds;
}
//# sourceMappingURL=BaseManager.d.ts.map