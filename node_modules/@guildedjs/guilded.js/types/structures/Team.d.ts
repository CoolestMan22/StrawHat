import Collection from '@discordjs/collection';
import type { APIMeasurements, APIPartialTeam, APIPostCreateInviteResult, APITeam, CHANNEL_CONTENT_TYPES } from '@guildedjs/guilded-api-typings';
import { Base } from './Base';
import { TeamChannel } from './Channel';
import type { Client } from './Client';
import { TeamGroupManager } from './managers/TeamGroupManager';
import { TeamMemberManager } from './managers/TeamMemberManager';
import { TeamRoleManager } from './managers/TeamRoleManager';
/**
 * A team is the basis of Guilded, it is where TeamChannels, TeamMembers, and TeamRoles reside.
 */
export declare class Team extends Base<APITeam | APIPartialTeam> {
    /**
     * Whether the current client is an admin of this team.
     */
    admin: boolean | null;
    /**
     * Whether the current client is banned from this team
     */
    banned: boolean | null;
    /**
     * The bio of this team
     */
    bio: string | null;
    /**
     * The date in which this team was created
     * @readonly
     */
    readonly createdAt: Date;
    /**
     * The description of this team
     */
    description: string;
    /**
     * Whether the current client has this team favorited
     */
    favorited: boolean;
    /**
     * Whether the current client is following this team
     */
    followed: boolean;
    /**
     * Whether people can be invited to this team
     */
    invitable: boolean | null;
    /**
     * The measurement system that this team goes by
     */
    measurements: APIMeasurements;
    /**
     * The number of members this team has
     */
    memberCount: number;
    /**
     * The members residing in this team. Will most likely have an incomplete cache, so you should ensure you use the fetch methods
     */
    members: TeamMemberManager;
    /**
     * The roles in this team.
     */
    roles: TeamRoleManager;
    /**
     * The name of this team
     */
    name: string;
    /**
     * The ID of the owner of this team
     */
    ownerID: string;
    /**
     * Whether this team has pro status
     */
    pro: boolean;
    /**
     * Icon of this team
     */
    profilePicture: string;
    /**
     * Whether this team is public or not
     */
    public: boolean;
    /**
     * Whether this team is recruiting or not
     */
    recruiting: boolean;
    /**
     * The subdomain belonging to this team
     */
    subdomain: string;
    /**
     * The main timezone of this team
     */
    timezone: string | null;
    /**
     * The type of this team
     */
    type: string | null;
    /**
     * Whether this team is verified or not
     */
    verified: boolean;
    /**
     * The ID of the main group belonging to this team
     */
    baseGroupID: string;
    /**
     * Information about the respective connected discord server
     */
    discord: {
        guildID: string | null;
        name: string | null;
    };
    /**
     * The groups belonging to this team
     */
    readonly groups: TeamGroupManager;
    /**
     * The games that this team plays
     */
    games: unknown[];
    /**
     * The various banner styles belonging to this server
     */
    banners: {
        small: string | null;
        medium: string | null;
        large: string | null;
    };
    constructor(client: Client, data: APITeam);
    /**
     * Update the data in this structure
     * @internal
     */
    patch(data: Partial<APITeam> | APITeam): this;
    /**
     * Create an invite to this team
     */
    createInvite(): Promise<APIPostCreateInviteResult>;
    deleteInvite(inviteID: string): Promise<string>;
    /**
     * Creates a Teamchannel and fires a CreateChannelEvent on success.
     * @hidden
     * @param name The name of the channel.
     * @param contentType The type of the channel.
     * @param channelCategoryID the category's ID to create this channel under.
     * @param isPublic whether or not this channel should be visible to users who aren't in the team.
     * @returns
     */
    createChannel(name: string, contentType: CHANNEL_CONTENT_TYPES, channelCategoryID?: number | null, isPublic?: boolean): Promise<TeamChannel>;
    /**
     * Retrive the banner belonging to this server depending on size
     * @param size the size of the returned image url.
     */
    bannerURL(size?: 'small' | 'medium' | 'large'): string | null;
    fetch(): Promise<Team>;
    /**
     * Fetch all the channels belonging to this team
     */
    fetchChannels(cache?: boolean): Promise<Collection<string, TeamChannel>>;
}
//# sourceMappingURL=Team.d.ts.map