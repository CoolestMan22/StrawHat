import type { APIAlias, APIUser, APIUserStatus } from '@guildedjs/guilded-api-typings';
import type { Embed } from "@guildedjs/embeds";
import { Base } from './Base';
import { Client } from './Client';
import type { Message } from './Message';
import { DMChannel } from './Channel';
/**
 * Object representing a user on the guilded.gg platform.
 */
export declare class User extends Base<APIUser> {
    /**
     * Addition info about this user
     */
    aboutInfo: {
        bio: string | null;
        tagLine: string | null;
    };
    /**
     * The aliases this user might have on games
     */
    aliases: APIAlias[];
    /**
     * The email of this user
     */
    email: string | null;
    /**
     * When this user joined Guilded
     */
    readonly joinDate: Date;
    /**
     * The last date in which this user was detected online
     */
    lastOnline: Date;
    /**
     * The moderation status of this account
     */
    moderationStatus: string | null;
    /**
     * The username of this user
     */
    name: string;
    /**
     * The various styled banners belonging to this user
     */
    banners: {
        blur: string | null;
        large: string | null;
        small: string | null;
    };
    /**
     * The various styled avatars belonging to this user
     */
    avatarURLs: {
        medium: string | null;
        blur: string | null;
        large: string | null;
        small: string | null;
    };
    /**
     * Unknown property
     */
    serviceEmail: string | null;
    /**
     * This users steam ID
     */
    steamID: string | null;
    /**
     * The subdomain belonging to this user
     */
    subdomain: string;
    /**
     * The current status of this user
     */
    userStatus: APIUserStatus;
    /**
     * DMChannel associated with this user, if cached.
     */
    dmChannel: DMChannel | null;
    constructor(client: Client, data: APIUser);
    /**
     * Update the data in this structure
     * @internal
     */
    patch(data: APIUser | Partial<APIUser>): this;
    /**
     * Retrieve a banner belonging to this team
     */
    bannerURL(size?: 'small' | 'blur' | 'large'): string | null;
    /**
     * Retrieve an avatar belonging to this team
     */
    avatarURL(size?: 'small' | 'blur' | 'medium' | 'large'): string | null;
    fetchDMChannel(): Promise<undefined>;
    /**
     * Send a DM to this user.
     * @param content Either a string content or RichEmbed to send to this channel.
     * @param embed A RichEmbed to send to this channel.
     */
    send(content: string | Embed, embed?: Embed): Promise<Message | string>;
}
//# sourceMappingURL=User.d.ts.map