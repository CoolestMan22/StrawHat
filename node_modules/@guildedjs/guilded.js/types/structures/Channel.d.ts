import Collection from '@discordjs/collection';
import Embed from '@guildedjs/embeds';
import type { APIDMChannel, APITeamChannel, APIUser, CHANNEL_CONTENT_TYPES, CHANNEL_TYPES } from '@guildedjs/guilded-api-typings';
import type { BaseData } from '../typings';
import { Base } from './Base';
import { Client } from './Client';
import type { Group } from './Group';
import { MessageManager } from './managers/MessageManager';
import type { Message } from './Message';
import { Role, RolePermissionOverwrite } from './Role';
import type { Team } from './Team';
import type { User } from './User';
/**
 * A partial channel, not enough data received however to construct a full channel type object.
 */
export declare class PartialChannel extends Base<BaseData> {
    private _team;
    /**
     * The messages belonging to this channel.
     * @readonly
     */
    readonly messages: MessageManager | null;
    /**
     * The id of the Team this channel belongs to if it is a part of a Team.
     */
    teamID: string | null;
    /**
     * The type of this channel ("Team", "DM").
     * @see {@link https://zaida04.github.io/guildedjs-selfbot-docs/modules/guilded_js.html#channel_types}
     * @readonly
     */
    readonly type: CHANNEL_TYPES;
    /**
     * The content type of this channel ("chat", "voice", "forum", "doc").
     * @see {@link https://zaida04.github.io/guildedjs-selfbot-docs/modules/guilded_js.html#channel_content_types}
     * @readonly
     */
    readonly contentType: CHANNEL_CONTENT_TYPES;
    /**
     * The date in which this channel was created.
     * @readonly
     */
    readonly createdAt: Date;
    /**
     * The user ID belonging to the creator of this Team.
     * @readonly
     */
    readonly createdBy: string;
    constructor(client: Client, data: Partial<APITeamChannel | APIDMChannel>, _team: Team | null, patch?: boolean);
    /**
     * Getter for retrieving the team this channel belongs to if it is cached.
     */
    get team(): Team | null;
    /**
     * Update the data in this structure.
     * @internal
     */
    patch(data: Partial<APITeamChannel | APIDMChannel>): this;
    /**
     * Send a message to this channel.
     * @param content Either a string content or RichEmbed to send to this channel.
     * @param embed A RichEmbed to send to this channel.
     */
    send(content: string | Embed, embed?: Embed): Promise<Message | string>;
}
/**
 * A channel between the client user and an other user(s) in DMs.
 */
export declare class DMChannel extends PartialChannel {
    /**
     * The type of this channel.
     * @defaultValue "DM"
     * @readonly
     */
    readonly type: CHANNEL_TYPES;
    /**
     * The name of the channel (group channels?).
     */
    name: string | null;
    /**
     * The description of the channel (group channels?).
     */
    description: string | null;
    /**
     * The users that belong in this channel, including the client.
     * @readonly
     */
    readonly users: Collection<string, User | APIUser>;
    /**
     * Latest date this channel was updated.
     */
    updatedAt: Date | null;
    /**
     * The type of the content in this channel ("chat", "voice", "etc").
     * @readonly
     */
    readonly contentType: CHANNEL_CONTENT_TYPES;
    /**
     * Date this channel was archived.
     */
    archivedAt: Date | null;
    /**
     * Date this channel will auto archive.
     */
    autoArchiveAt: Date | null;
    /**
     * The ID of the parent channel.
     */
    parentChannelID: string | null;
    /**
     * Date this channel was deleted.
     */
    deletedAt: Date | null;
    /**
     * The webhook that created this channel.
     * @readonly
     */
    readonly createdByWebhookID: string | null;
    /**
     * The type of this dm channel (???)
     * @readonly
     */
    readonly dmType = "Default";
    /**
     * The ID of the owner of this channel
     * @readonly
     */
    readonly ownerID: string;
    /**
     * The manager in charge of the messages sent in this channel.
     * @readonly
     */
    readonly messages: MessageManager;
    /**
     * The current participants in a voice call within this channel.
     */
    voiceParticipants: APIUser[];
    constructor(client: Client, data: APIDMChannel);
    patch(data: APIDMChannel | Partial<APIDMChannel>): this;
}
/**
 * A channel residing in a Team
 */
export declare class TeamChannel extends PartialChannel {
    private _group;
    /**
     * The type of this channel.
     * @defaultValue "Team"
     * @readonly
     */
    readonly type = "Team";
    /**
     * Latest date this channel was updated.
     */
    updatedAt: Date | null;
    /**
     * The name of the channel (group channels?).
     */
    name: string;
    /**
     * The type of the content in this channel ("chat", "voice", "etc").
     * @readonly
     */
    readonly contentType: CHANNEL_CONTENT_TYPES;
    /**
     * Date this channel was archived.
     */
    archivedAt: Date | null;
    /**
     * Date this channel will auto archive.
     */
    autoArchiveAt: Date | null;
    /**
     * The ID of the parent channel.
     */
    parentChannelID: string | null;
    /**
     * Date this channel was deleted.
     */
    deletedAt: Date | null;
    /**
     * The ID of the user who archived this channel.
     */
    archivedByID: string | null;
    /**
     * The description of this channel.
     */
    description: string | null;
    /**
     * The ID of the webhook that created this channel.
     */
    createdByWebhookID: string | null;
    /**
     * The ID of the webhook that archived this channel.
     */
    archivedByWebhookID: string | null;
    /**
     * The ID of the team this channel belongs to.
     */
    teamID: string;
    /**
     * The ID of the category this channel belongs to.
     */
    channelCategoryID: string | null;
    /**
     * Date this channel was added (??).
     */
    addedAt: Date | null;
    /**
     * Whether the roles are synced (with discord?).
     */
    roleSynced: boolean | null;
    /**
     * The role permission overwrites that belong to this channel.
     */
    roles: Collection<string, Role | RolePermissionOverwrite>;
    /**
     * Array of role IDs that have an overwrite in this channel.
     */
    roleIDs: string[];
    /**
     * Array of tournament role IDs.
     */
    tournamentRoleIDs: string[];
    /**
     * Array of IDs belonging to users that have an overwrite in this channel.
     */
    userPermissions: string[];
    /**
     * Tournament roles.
     */
    tournamentRoles: Collection<string, Role | RolePermissionOverwrite>;
    /**
     * Whether this channel can be seen without joining the Team/Group.
     */
    public: boolean;
    /**
     * Position of the group.
     */
    priority: number;
    /**
     * The ID of the group this channel belongs to
     */
    groupID: string;
    /**
     * The type of the group this channel belongs to
     */
    groupType: string;
    /**
     * The manager in charge of messages sent in this channel ONLY IF THIS CHANNEL SUPPORTS MESSAGES
     */
    readonly messages: MessageManager | null;
    constructor(client: Client, data: APITeamChannel, _team: Team | null, _group: Group | null);
    /**
     * The group object this channel belongs to, if cached.
     */
    get group(): Group | null;
    patch(data: APITeamChannel | Partial<APITeamChannel>): this;
}
//# sourceMappingURL=Channel.d.ts.map