import type { APIGroup } from '@guildedjs/guilded-api-typings';
import { Base } from './Base';
import type { Client } from './Client';
import { TeamGroupChannelManager } from './managers/TeamGroupChannelManager';
import type { Team } from './Team';
/**
 * A group residing within a Team that contains channels.
 */
export declare class Group extends Base<APIGroup> {
    team: Team | null;
    /**
     * The channels that belong to this group.
     */
    readonly channels: TeamGroupChannelManager;
    /**
     * The name of this group.
     */
    name: string;
    /**
     * The description of this group.
     */
    description: string | null;
    /**
     * The position of this group.
     */
    priority: string | null;
    /**
     * The type of this group.
     */
    type: string;
    /**
     * The avatar hash of this group.
     */
    avatar: string | null;
    /**
     * The banner hash of this group.
     */
    banner: string | null;
    /**
     * The ID of the team this group belongs to.
     * @readonly
     */
    teamID: string;
    /**
     * The ID of the game this group belongs to.
     */
    gameID: string | null;
    /**
     * The role required to see this group.
     */
    visibilityTeamRoleID: number;
    /**
     * The role required to be considered a member of this group.
     */
    membershipTeamRoleID: number;
    /**
     * If this is the base group of the team this group belongs to.
     */
    isBase: boolean;
    /**
     * The ID of the user that created this group.
     */
    readonly createdByID: string | null;
    /**
     * Date this group was created on.
     */
    readonly createdAt: Date;
    /**
     * The ID of the user that last updated this group.
     */
    updatedBy: string | null;
    /**
     * Date this group was last updated.
     */
    updatedAt: Date | null;
    /**
     * Date this group was deleted at.
     */
    deletedAt: Date | null;
    /**
     * ID of the custom reaction tied to this group.
     */
    customReactionID: string | null;
    /**
     * Whether this group is public or not (can be seen without being a member).
     */
    public: boolean;
    /**
     * Date this group was archived at.
     */
    archivedAt: Date | null;
    /**
     * The ID of the user that archived this group.
     */
    archivedBy: string | null;
    constructor(client: Client, data: APIGroup, team: Team | null);
    /**
     * Update the data in this structure
     * @internal
     */
    patch(data: APIGroup | Partial<APIGroup>): this;
}
//# sourceMappingURL=Group.d.ts.map