"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ws_1 = __importDefault(require("ws"));
const Heartbeater_1 = __importDefault(require("./Heartbeater"));
class GatewayHandler {
    constructor(client) {
        this.client = client;
        this.heartbeater = new Heartbeater_1.default(this);
        this.ping = 0;
        this.connectedAt = null;
        this.sessionID = null;
    }
    destroy(intentionToReconnect) {
        var _a, _b, _c;
        if (!this.ws) {
            throw Error("Attempting to destroy WS connection that doesn't exist!");
        }
        /**
         * Credits to: https://github.com/Skillz4Killz/gapi/blob/master/src/websocket/Shard.ts#L186
         * AUTHOR: https://github.com/Skillz4Killz
         * LICENSE: APACHE LICENSE 2.0 (https://github.com/Skillz4Killz/gapi/blob/master/LICENSE)
         */
        if (intentionToReconnect && this.sessionID) {
            if (this.ws.readyState === ws_1.default.OPEN)
                (_a = this.ws) === null || _a === void 0 ? void 0 : _a.close(4901, 'Reconnect with session id please');
            else
                (_b = this.ws) === null || _b === void 0 ? void 0 : _b.terminate();
        }
        else {
            (_c = this.ws) === null || _c === void 0 ? void 0 : _c.close(1000, 'Clean close with no reconnection.');
        }
        this.ws.removeAllListeners();
        this.ws = null;
        this.heartbeater.destroy();
        if (intentionToReconnect)
            this.init();
    }
}
exports.default = GatewayHandler;
//# sourceMappingURL=GatewayHandler.js.map