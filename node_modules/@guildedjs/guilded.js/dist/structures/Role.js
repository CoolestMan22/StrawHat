"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RolePermissionOverwrite = exports.Role = void 0;
const util_1 = require("../util");
const Base_1 = require("./Base");
/**
 * A role belonging to a team
 */
class Role extends Base_1.Base {
    constructor(client, data, _team) {
        super(client, data);
        this._team = _team;
        this.discord = { roleID: null, syncedAt: null };
        this.createdAt = new Date(data.createdAt);
        this.updatedAt = null;
        this.teamID = data.teamId;
        this.patch(data);
    }
    get team() {
        return (0, util_1.retrieveTeamFromStructureCache)({
            _team: this._team,
            client: this.client,
            teamID: this.teamID,
        });
    }
    /**
     * Update the data in this structure
     * @internal
     */
    patch(data) {
        if ('permissions' in data && data.permissions)
            this.permissions = data.permissions;
        if ('isMentionable' in data && data.isMentionable)
            this.mentionable = data.isMentionable;
        if ('isDisplayedSeparately' in data && data.isDisplayedSeparately)
            this.hoisted = data.isDisplayedSeparately;
        if ('discordRoleId' in data && data.discordRoleId !== undefined)
            this.discord.roleID = data.discordRoleId;
        if ('discordSyncedAt' in data && data.discordSyncedAt !== undefined) {
            this.discord.syncedAt = data.discordSyncedAt ? new Date(data.discordSyncedAt) : null;
        }
        if ('isSelfAssignable' in data && data.isSelfAssignable)
            this.selfAssignable = data.isSelfAssignable;
        if ('updatedAt' in data && data.updatedAt !== undefined) {
            this.updatedAt = data.updatedAt ? new Date(data.updatedAt) : null;
        }
        if ('priority' in data && data.priority)
            this.priority = data.priority;
        if ('color' in data && data.color)
            this.color = data.color;
        if ('name' in data && data.name)
            this.name = data.name;
        return this;
    }
}
exports.Role = Role;
/**
 * Object representing permission overwrites for a role on a team channel.
 */
class RolePermissionOverwrite {
    constructor(client, data, channel) {
        this.client = client;
        this.channel = channel;
        this.teamID = data.teamId;
        this.channelID = data.channelId;
        this.createdAt = new Date(data.createdAt);
        this.updatedAt = data.updatedAt ? new Date(data.updatedAt) : null;
        this.teamRoleID = data.teamRoleId.toString();
        this.denyPermissions = data.denyPermissions;
        this.allowPermissions = data.allowPermissions;
    }
}
exports.RolePermissionOverwrite = RolePermissionOverwrite;
//# sourceMappingURL=Role.js.map