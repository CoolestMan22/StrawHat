"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserManager = void 0;
const User_1 = require("../User");
const BaseManager_1 = require("./BaseManager");
class UserManager extends BaseManager_1.BaseManager {
    constructor(client) {
        var _a, _b, _c;
        super(client, User_1.User, { maxSize: (_c = (_b = (_a = client.options) === null || _a === void 0 ? void 0 : _a.cache) === null || _b === void 0 ? void 0 : _b.cacheMaxSize) === null || _c === void 0 ? void 0 : _c.usersCache });
    }
    /**
     * Fetch a user, retrieves from the cache if exists
     */
    fetch(id, cache = true, force = false) {
        const existing = force ? null : this.cache.get(id);
        if (existing)
            return Promise.resolve(existing);
        return this.client.rest.get(`/users/${id}`).then(x => {
            const tempUser = new User_1.User(this.client, x.user);
            if (cache)
                this.client.users.cache.set(tempUser.id, tempUser);
            return tempUser;
        });
    }
}
exports.UserManager = UserManager;
//# sourceMappingURL=UserManager.js.map