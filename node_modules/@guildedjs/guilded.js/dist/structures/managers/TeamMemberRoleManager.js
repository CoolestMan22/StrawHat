"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeamMemberRoleManager = void 0;
const Role_1 = require("../Role");
const BaseManager_1 = require("./BaseManager");
class TeamMemberRoleManager extends BaseManager_1.BaseManager {
    constructor(client, member) {
        var _a, _b, _c;
        super(client, Role_1.Role, { maxSize: (_c = (_b = (_a = client.options) === null || _a === void 0 ? void 0 : _a.cache) === null || _b === void 0 ? void 0 : _b.cacheMaxSize) === null || _c === void 0 ? void 0 : _c.memberRolesCache });
        this.member = member;
    }
    /**
     * Shortcut for adding a role to a member.
     * @param role The ID or Role object of the role to add to the member.
     * @see {@link https://zaida04.github.io/guildedjs-selfbot-docs/classes/guilded_js.teammanager.html#addroletomember}
     */
    append(role) {
        return this.client.teams.addRoleToMember(this.member.team.id, this.member, role);
    }
    /**
     * Shortcut for removing a role from a member.
     * @param role The ID or Role object of the role to add to the member.
     * @see {@link https://zaida04.github.io/guildedjs-selfbot-docs/classes/guilded_js.teammanager.html#removerolefrommember}
     */
    remove(role) {
        return this.client.teams.removeRoleFromMember(this.member.team.id, this.member, role);
    }
}
exports.TeamMemberRoleManager = TeamMemberRoleManager;
//# sourceMappingURL=TeamMemberRoleManager.js.map