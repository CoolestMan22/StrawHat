"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseManager = void 0;
const common_1 = require("@guildedjs/common");
/**
 * The manager in charge of cached objects and potential api endpoints
 * @param K The base amount of data required to construct object T
 * @param T The object that will be held in this manager
 */
class BaseManager {
    constructor(client, holds, cacheOptions) {
        var _a;
        this.client = client;
        this.holds = holds;
        this.cacheOptions = cacheOptions;
        this.cache = new common_1.CacheCollection((_a = this.cacheOptions) !== null && _a !== void 0 ? _a : {});
    }
    /**
     * Add an object, potential data, or constructor params into this managers cache
     * @private
     */
    add(data) {
        if (this.isConstructorParamsOfHolds(data)) {
            const addition = new this.holds(...data);
            this.cache.set(addition.id.toString(), addition);
            return addition;
        }
        else if (this.isInstanceOfHolds(data)) {
            this.cache.set(data.id.toString(), data);
            return data;
        }
        else {
            const existing = data.id ? this.cache.get(data.id.toString()) : null;
            if (existing) {
                existing.patch(data);
            }
            return existing !== null && existing !== void 0 ? existing : null;
        }
    }
    isConstructorParamsOfHolds(data) {
        return Array.isArray(data);
    }
    isInstanceOfHolds(data) {
        return data instanceof this.holds;
    }
}
exports.BaseManager = BaseManager;
//# sourceMappingURL=BaseManager.js.map