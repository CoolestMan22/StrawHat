"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Webhook = void 0;
const util_1 = require("../util");
const Base_1 = require("./Base");
/**
 * Object representing received webhook data. This object is NOT to be used to send data to webhooks. That will be WebhookClient
 */
class Webhook extends Base_1.Base {
    constructor(client, data, _channel) {
        var _a;
        super(client, data);
        this._channel = _channel;
        this.createdAt = new Date(data.createdAt);
        this.deletedAt = null;
        this.iconURL = null;
        this.createdByID = data.createdBy;
        this.channelID = data.channelId;
        this.teamID = data.teamId;
        this._team = (_a = _channel === null || _channel === void 0 ? void 0 : _channel.team) !== null && _a !== void 0 ? _a : null;
        this._createdBy = null;
        this.patch(data);
    }
    /**
     * The channel object this webhook belongs to if cached
     */
    get channel() {
        return (0, util_1.retrieveChannelFromStructureCache)({
            _channel: this._channel,
            channelID: this.channelID,
            client: this.client,
        });
    }
    /**
     * The User object of the user that created this webhook if cached
     */
    get createdBy() {
        return (0, util_1.retrieveCreatorFromStructureCache)({
            _createdBy: this._createdBy,
            client: this.client,
            createdByID: this.createdByID,
        });
    }
    /**
     * The team object this webhook belongs to if cached
     */
    get team() {
        return (0, util_1.retrieveTeamFromStructureCache)({
            _team: this._team,
            client: this.client,
            teamID: this.teamID,
        });
    }
    /**
     * Update the data in this structure
     * @internal
     */
    patch(data) {
        if ('name' in data && data.name !== undefined)
            this.name = data.name;
        if ('iconUrl' in data && data.iconUrl !== undefined)
            this.iconURL = data.iconUrl;
        if ('deletedAt' in data && data.deletedAt !== undefined) {
            this.deletedAt = data.deletedAt ? new Date(data.deletedAt) : null;
        }
        return this;
    }
}
exports.Webhook = Webhook;
//# sourceMappingURL=Webhook.js.map