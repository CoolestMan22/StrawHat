"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Group = void 0;
const Base_1 = require("./Base");
const TeamGroupChannelManager_1 = require("./managers/TeamGroupChannelManager");
/**
 * A group residing within a Team that contains channels.
 */
class Group extends Base_1.Base {
    constructor(client, data, team) {
        super(client, data);
        this.team = team;
        this.channels = new TeamGroupChannelManager_1.TeamGroupChannelManager(this.client, this);
        this.description = null;
        this.priority = null;
        this.type = data.type;
        this.avatar = null;
        this.banner = null;
        this.teamID = data.teamId;
        this.gameID = null;
        this.visibilityTeamRoleID = data.visibilityTeamRoleId;
        this.membershipTeamRoleID = data.membershipTeamRoleId;
        this.createdByID = data.createdBy;
        this.createdAt = new Date(data.createdAt);
        this.updatedAt = null;
        this.updatedBy = null;
        this.deletedAt = null;
        this.customReactionID = null;
        this.archivedAt = null;
        this.archivedBy = null;
        this.patch(data);
    }
    /**
     * Update the data in this structure
     * @internal
     */
    patch(data) {
        var _a, _b;
        if ('name' in data && data.name !== undefined)
            this.name = data.name;
        if ('description' in data && data.description !== undefined)
            this.description = data.description;
        if ('priority' in data && data.priority !== undefined)
            this.priority = data.priority;
        if ('type' in data && data.type !== undefined)
            this.type = data.type;
        if ('avatar' in data && data.avatar !== undefined)
            this.avatar = data.avatar;
        if ('banner' in data && data.banner !== undefined)
            this.banner = data.banner;
        if ('updatedBy' in data && data.updatedBy !== undefined)
            this.updatedBy = (_a = data.updatedBy) !== null && _a !== void 0 ? _a : null;
        if ('updatedAt' in data && data.updatedAt !== undefined) {
            this.updatedAt = data.updatedAt ? new Date(data.updatedAt) : null;
        }
        if ('deletedAt' in data && data.deletedAt !== undefined) {
            this.deletedAt = data.deletedAt ? new Date(data.deletedAt) : null;
        }
        if ('customReactionId' in data && data.customReactionId !== undefined) {
            this.customReactionID = data.customReactionId;
        }
        if ('isPublic' in data && data.isPublic !== undefined)
            this.public = data.isPublic;
        if ('archivedAt' in data && data.archivedAt !== undefined) {
            this.archivedAt = data.archivedAt ? new Date(data.archivedAt) : null;
        }
        if ('archivedBy' in data && data.archivedBy !== undefined)
            this.archivedBy = (_b = data.archivedBy) !== null && _b !== void 0 ? _b : null;
        return this;
    }
}
exports.Group = Group;
//# sourceMappingURL=Group.js.map