"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = void 0;
const Base_1 = require("./Base");
const Channel_1 = require("./Channel");
/**
 * Object representing a user on the guilded.gg platform.
 */
class User extends Base_1.Base {
    constructor(client, data) {
        super(client, data);
        this.aboutInfo = {
            bio: null,
            tagLine: null,
        };
        this.aliases = [];
        this.email = null;
        this.moderationStatus = null;
        this.banners = {
            blur: null,
            large: null,
            small: null,
        };
        this.avatarURLs = {
            blur: null,
            large: null,
            medium: null,
            small: null,
        };
        this.serviceEmail = null;
        this.steamID = null;
        this.subdomain = data.subdomain;
        this.joinDate = new Date(data.joinDate);
        this.dmChannel = null;
        this.patch(data);
    }
    /**
     * Update the data in this structure
     * @internal
     */
    patch(data) {
        var _a, _b, _c, _d, _e;
        if ('aboutInfo' in data && data.aboutInfo !== undefined) {
            this.aboutInfo = {
                bio: (_b = (_a = data.aboutInfo) === null || _a === void 0 ? void 0 : _a.bio) !== null && _b !== void 0 ? _b : null,
                tagLine: (_d = (_c = data.aboutInfo) === null || _c === void 0 ? void 0 : _c.tagLine) !== null && _d !== void 0 ? _d : null,
            };
        }
        if ('aliases' in data && data.aliases !== undefined)
            this.aliases = data.aliases;
        if ('email' in data && data.email !== undefined)
            this.email = (_e = data.email) !== null && _e !== void 0 ? _e : null;
        if ('lastOnline' in data && data.lastOnline !== undefined)
            this.lastOnline = new Date(data.lastOnline);
        if ('name' in data && data.name !== undefined)
            this.name = data.name;
        if ('steamId' in data && data.steamId !== undefined)
            this.steamID = data.steamId;
        if ('subdomain' in data && data.subdomain !== undefined)
            this.subdomain = data.subdomain;
        if ('userStatus' in data && data.userStatus !== undefined)
            this.userStatus = data.userStatus;
        this.banners = { blur: null, large: null, small: null };
        this.avatarURLs = { blur: null, large: null, medium: null, small: null };
        if ('profileBannerBlur' in data && data.profileBannerBlur)
            this.banners.blur = data.profileBannerBlur;
        if ('profileBannerLg' in data && data.profileBannerLg)
            this.banners.large = data.profileBannerLg;
        if ('profileBannerSm' in data && data.profileBannerSm)
            this.banners.small = data.profileBannerSm;
        if ('profilePicture' in data && data.profilePicture)
            this.avatarURLs.medium = data.profilePicture;
        if ('profilePictureBlur' in data && data.profilePictureBlur)
            this.avatarURLs.blur = data.profilePictureBlur;
        if ('profilePictureLg' in data && data.profilePictureLg)
            this.avatarURLs.large = data.profilePictureLg;
        if ('profilePictureSm' in data && data.profilePictureSm)
            this.avatarURLs.small = data.profilePictureSm;
        return this;
    }
    /**
     * Retrieve a banner belonging to this team
     */
    bannerURL(size = 'large') {
        let url;
        switch (size) {
            case 'small': {
                url = this.banners.small;
                break;
            }
            case 'blur': {
                url = this.banners.blur;
                break;
            }
            case 'large': {
                url = this.banners.large;
                break;
            }
            default: {
                throw new TypeError('bannerURL method only accepts small, medium, or large as the parameter');
            }
        }
        return url !== null && url !== void 0 ? url : null;
    }
    /**
     * Retrieve an avatar belonging to this team
     */
    avatarURL(size = 'medium') {
        let url;
        switch (size) {
            case 'blur': {
                url = this.avatarURLs.blur;
                break;
            }
            case 'small': {
                url = this.avatarURLs.small;
                break;
            }
            case 'medium': {
                url = this.avatarURLs.blur;
                break;
            }
            case 'large': {
                url = this.avatarURLs.large;
                break;
            }
            default: {
                throw new TypeError('avatarURL method only accepts small, medium, or large as the parameter');
            }
        }
        return url !== null && url !== void 0 ? url : null;
    }
    fetchDMChannel() {
        return this.client.rest.post(`/users/${this.client.user.id}/channels`, { users: [{ id: this.id }] }).then(x => {
            const channel = new Channel_1.DMChannel(this.client, x.channel);
            this.client.channels.add(channel);
            this.dmChannel = channel;
            return void 0;
        });
    }
    /**
     * Send a DM to this user.
     * @param content Either a string content or RichEmbed to send to this channel.
     * @param embed A RichEmbed to send to this channel.
     */
    send(content, embed) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.dmChannel)
                yield this.fetchDMChannel();
            return this.client.channels.sendMessage(this.dmChannel.id, content, embed);
        });
    }
}
exports.User = User;
//# sourceMappingURL=User.js.map