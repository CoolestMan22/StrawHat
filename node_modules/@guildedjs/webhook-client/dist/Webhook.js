"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebhookClient = void 0;
const common_1 = require("@guildedjs/common");
const rest_1 = require("@guildedjs/rest");
class WebhookClient {
    constructor(webhookConnection) {
        this.api = new rest_1.RestManager({ apiURL: common_1.ROUTES.MEDIA_DOMAIN });
        if (!webhookConnection) {
            throw new TypeError(`Must provide Webhook connection info in either string or object. Received ${webhookConnection}.`);
        }
        if (typeof webhookConnection === 'string') {
            const destructuredWebhookURL = webhookConnection.match(/guilded.gg\/webhooks\/([^/]+)\/([^/]+)/);
            if (!(destructuredWebhookURL === null || destructuredWebhookURL === void 0 ? void 0 : destructuredWebhookURL.length)) {
                throw new Error('Not a proper guilded webhook URL! Alternatively, you can provide an ID/token');
            }
            this.id = destructuredWebhookURL[1];
            this.token = destructuredWebhookURL[2];
        }
        else if (webhookConnection.id && webhookConnection.token) {
            this.id = webhookConnection.id;
            this.token = webhookConnection.token;
        }
        else {
            throw new TypeError('You must provide either a webhook URL or a webhook ID & token in an object when constructing the Webhook Client');
        }
        this.URL = `https://${common_1.ROUTES.MEDIA_DOMAIN}/webhooks/${this.id}/${this.token}`;
    }
    /* istanbul ignore next */
    send(content, embeds) {
        return this.api
            .post(`/webhooks/${this.id}/${this.token}`, {
            content,
            embeds,
        })
            .then(data => {
            const parsedContent = common_1.parseMessage(data.content);
            return Object.assign(Object.assign({}, data), { content: parsedContent.parsedText, parsedContent, rawContent: data.content });
        });
    }
}
exports.WebhookClient = WebhookClient;
exports.default = WebhookClient;
//# sourceMappingURL=Webhook.js.map