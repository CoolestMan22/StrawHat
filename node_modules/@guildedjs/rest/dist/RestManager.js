"use strict";
/* istanbul ignore file */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RestManager = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const GuildedAPIError_1 = require("./GuildedAPIError");
class RestManager {
    constructor(config) {
        var _a;
        this.config = config;
        this.apiURL = `https://${(_a = config === null || config === void 0 ? void 0 : config.apiURL) !== null && _a !== void 0 ? _a : 'www.guilded.gg/api'}`;
    }
    make(data, authenticated = true, retryCount = 0) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            const headers = {};
            if (authenticated)
                headers.cookie = `hmac_signed_session=${this.token};`;
            const requestOptions = {
                body: data.body ? JSON.stringify(data.body) : undefined,
                headers: Object.assign({ 'content-type': 'application/json' }, headers),
                method: data.method,
            };
            let request;
            try {
                request = yield (0, node_fetch_1.default)(this.apiURL + data.path, requestOptions);
            }
            catch (e) {
                throw new Error(`Error while making API call, ${e.message.toString()}`);
            }
            if (!request.ok) {
                if (request.status === 429) {
                    if (retryCount >= ((_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.maxRatelimitRetryLimit) !== null && _b !== void 0 ? _b : 3)) {
                        throw new Error('MAX REQUEST RATELIMIT RETRY LIMIT REACHED.');
                    }
                    yield sleep((_d = (_c = this.config) === null || _c === void 0 ? void 0 : _c.restOffset) !== null && _d !== void 0 ? _d : 3500);
                    return this.make(data, authenticated, retryCount++);
                }
                const parsedRequest = yield request.json().catch(() => ({ message: 'Cannot parse JSON Error Response.' }));
                throw new GuildedAPIError_1.GuildedAPIError(parsedRequest.message, data.method, data.path, request.status);
            }
            return [request, request.json().catch(() => ({}))];
        });
    }
    get(path, authenticated = true) {
        return this.make({
            method: 'GET',
            path,
        }, authenticated).then(x => x[1]);
    }
    post(path, body, authenticated = true) {
        return this.make({
            body,
            method: 'POST',
            path,
        }, authenticated).then(x => x[1]);
    }
    delete(path, body, authenticated = true) {
        return this.make({
            body,
            method: 'DELETE',
            path,
        }, authenticated).then(x => x[1]);
    }
    patch(path, body, authenticated = true) {
        return this.make({
            body,
            method: 'PATCH',
            path,
        }, authenticated).then(x => x[1]);
    }
    put(path, body, authenticated = true) {
        return this.make({
            body,
            method: 'PUT',
            path,
        }, authenticated).then(x => x[1]);
    }
    setAuth(cookieJar) {
        this.cookieJar = cookieJar;
        const setCookies = cookieJar.split(' ');
        this.token = extractFromCookieJar(setCookies, 0);
        this.guildedMID = extractFromCookieJar(setCookies, 11);
    }
    destroy() {
        this.cookieJar = undefined;
        this.token = undefined;
    }
}
exports.RestManager = RestManager;
const extractFromCookieJar = (decodedCookieJar, i) => decodedCookieJar[i].split('=')[1].split(';')[0];
const sleep = (ms) => new Promise(r => setTimeout(r, ms));
//# sourceMappingURL=RestManager.js.map