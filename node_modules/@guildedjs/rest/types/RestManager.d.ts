import { Response } from 'node-fetch';
export declare class RestManager {
    config?: RestManagerOptions | undefined;
    apiURL: string;
    token?: string;
    cookieJar?: string;
    guildedMID?: string;
    constructor(config?: RestManagerOptions | undefined);
    make<T extends JSONB>(data: MakeOptions, authenticated?: boolean, retryCount?: number): Promise<[Response, Promise<T>]>;
    get<T extends JSONB>(path: string, authenticated?: boolean): Promise<T>;
    post<T extends JSONB, B = RequestBodyObject>(path: string, body?: B, authenticated?: boolean): Promise<T>;
    delete<T extends JSONB, B = RequestBodyObject>(path: string, body?: B, authenticated?: boolean): Promise<T>;
    patch<T extends JSONB, B = RequestBodyObject>(path: string, body: B, authenticated?: boolean): Promise<T>;
    put<T extends JSONB, B = RequestBodyObject>(path: string, body?: B, authenticated?: boolean): Promise<T>;
    setAuth(cookieJar: string): void;
    destroy(): void;
}
export interface RestManagerOptions {
    apiURL?: string;
    restOffset?: number;
    maxRatelimitRetryLimit?: number;
}
export interface MakeOptions {
    method: string;
    path: string;
    body?: Record<string, any>;
}
export declare type JSONB = Record<string, any>;
export declare type RequestBodyObject = JSONB | undefined;
export interface LoginData {
    email: string;
    password: string;
}
//# sourceMappingURL=RestManager.d.ts.map