import type { RestBody, RestPath, RestPayload, RestQuery, Schema } from "@guildedjs/guilded-api-typings";
import type { RestManager } from "../RestManager";
export declare class Router {
    readonly rest: RestManager;
    constructor(rest: RestManager);
    /**
     * Create a channel
     */
    createChannel(data: RestBody<RestPath<"/channels">["post"]>): Promise<RestPayload<RestPath<"/channels">["post"], 201>>;
    /**
     * Fetch a channel
     */
    getChannel(channelId: string): Promise<RestPayload<RestPath<"/channels/{channelId}">["get"], 200>>;
    /**
     * Update a channel
     */
    updateChannel(channelId: string, data: RestBody<RestPath<"/channels/{channelId}">["patch"]>): Promise<RestPayload<RestPath<"/channels/{channelId}">["patch"], 200>>;
    /**
     * Delete a channel
     */
    deleteChannel(channelId: string): Promise<RestPayload<RestPath<"/channels/{channelId}">["delete"], 204>>;
    /**
     * Send a message to a channel
     */
    createChannelMessage(channelId: string, content: RestBody<RestPath<"/channels/{channelId}/messages">["post"]>): Promise<RestPayload<RestPath<"/channels/{channelId}/messages">["post"], 201>>;
    /**
     * Get a list of the latest 50 messages from a channel.
     */
    getChannelMessages(channelId: string, options: RestQuery<RestPath<"/channels/{channelId}/messages">["get"]>): Promise<RestPayload<RestPath<"/channels/{channelId}/messages">["get"], 200>>;
    /**
     * Get details for a specific chat message from a chat channel.
     */
    getChannelMessage(channelId: string, messageId: string): Promise<RestPayload<RestPath<"/channels/{channelId}/messages/{messageId}">["get"], 200>>;
    /**
     * Update a channel message.
     */
    updateChannelMessage(channelId: string, messageId: string, options: RestBody<RestPath<"/channels/{channelId}/messages/{messageId}">["put"]>): Promise<RestPayload<RestPath<"/channels/{channelId}/messages/{messageId}">["put"], 200>>;
    /**
     * Delete a channel message.
     */
    deleteChannelMessage(channelId: string, messageId: string): Promise<RestPayload<RestPath<"/channels/{channelId}/messages/{messageId}">["delete"], 200>>;
    /**
     * Get a single calendar event.
     */
    getCalendarEvent(channelId: string, calendarEventId: number): Promise<RestPayload<RestPath<"/channels/{channelId}/events/{calendarEventId}">["get"], 200>>;
    /**
     * Get all calendar events in a specific channel.
     */
    getCalendarEvents(channelId: string, options: RestQuery<RestPath<"/channels/{channelId}/events">["get"]>): Promise<RestPayload<RestPath<"/channels/{channelId}/events">["get"], 200>>;
    /**
     * Create a calendar event.
     */
    createCalendarEvent(channelId: string, options: RestBody<RestPath<"/channels/{channelId}/events">["post"]>): Promise<RestPayload<RestPath<"/channels/{channelId}/events">["post"], 200>>;
    /**
     * Update an existing calendar event.
     */
    updateCalendarEvent(channelId: string, calendarEventId: number, options: RestBody<RestPath<"/channels/{channelId}/events/{calendarEventId}">["patch"]>): Promise<RestPayload<RestPath<"/channels/{channelId}/events/{calendarEventId}">["patch"], 200>>;
    /**
     * Delete a calendar event.
     */
    deleteCalendarEvent(channelId: string, calendarEventId: number): Promise<RestPayload<RestPath<"/channels/{channelId}/events/{calendarEventId}">["delete"], 200>>;
    /**
     * Get a single rsvp from a calendar event
     */
    getCalendarEventRsvp(channelId: string, calendarEventId: number, userId: string): Promise<RestPayload<RestPath<"/channels/{channelId}/events/{calendarEventId}/rsvps/{userId}">["get"], 200>>;
    /**
     * Get rsvps from a calendar event
     */
    getCalendarEventRsvps(channelId: string, calendarEventId: number): Promise<RestPayload<RestPath<"/channels/{channelId}/events/{calendarEventId}/rsvps">["get"], 200>>;
    /**
     * Update an rsvp user from a calendar event
     */
    updateCalendarEventRvsp(channelId: string, calendarEventId: number, userId: string, options: RestBody<RestPath<"/channels/{channelId}/events/{calendarEventId}/rsvps/{userId}">["put"]>): Promise<RestPayload<RestPath<"/channels/{channelId}/events/{calendarEventId}/rsvps/{userId}">["put"], 200>>;
    /**
     * Update many rsvps from a calendar event
     */
    updateCalendarEventRsvpMany(channelId: string, calendarEventId: number, options: RestBody<RestPath<"/channels/{channelId}/events/{calendarEventId}/rsvps">["put"]>): Promise<RestPayload<RestPath<"/channels/{channelId}/events/{calendarEventId}/rsvps">["put"], 200>>;
    /**
     * Delete an rsvp user from a calendar event
     */
    deleteCalendarEventRsvp(channelId: string, calendarEventId: number, userId: string): Promise<RestPayload<RestPath<"/channels/{channelId}/events/{calendarEventId}/rsvps/{userId}">["delete"], 204>>;
    /**
     * Get a list of the roles assigned to a member using the id of the member.
     */
    getMemberRoles(serverId: string, userId: string): Promise<RestPayload<RestPath<"/servers/{serverId}/members/{userId}/roles">["get"], 200>>;
    /**
     * Update a member's nickname.
     */
    updateMemberNickname(serverId: string, userId: string, nickname: string): Promise<RestPayload<RestPath<"/servers/{serverId}/members/{userId}/nickname">["put"], 200>>;
    /**
     * Delete a member's nickname
     */
    deleteMemberNickname(serverId: string, userId: string): Promise<RestPayload<RestPath<"/servers/{serverId}/members/{userId}/nickname">["delete"], 204>>;
    /**
     * Get a server
     */
    getServer(serverId: string): Promise<RestPayload<RestPath<"/servers/{serverId}">["get"], 200>>;
    /**
     * Create a topic in a forum
     */
    createForumTopic(channelId: string, options: RestBody<RestPath<"/channels/{channelId}/topics">["post"]>): Promise<RestPayload<RestPath<"/channels/{channelId}/topics">["post"], 201>>;
    /**
     * Get all topics in a forum
     */
    getForumTopics(channelId: string, options: RestQuery<RestPath<"/channels/{channelId}/topics">["get"]>): Promise<RestPayload<RestPath<"/channels/{channelId}/topics">["get"], 200>>;
    /**
     * Get a topic in a forum
     */
    getForumTopic(channelId: string, forumThreadId: string): Promise<RestPayload<RestPath<"/channels/{channelId}/topics/{forumTopicId}">["get"], 200>>;
    /**
     * Update a topic in a forum
     */
    updateForumTopic(channelId: string, forumThreadId: string, options: RestBody<RestPath<"/channels/{channelId}/topics/{forumTopicId}">["patch"]>): Promise<RestPayload<RestPath<"/channels/{channelId}/topics/{forumTopicId}">["patch"], 201>>;
    /**
     * Delete a topic in a forum
     */
    deleteForumTopic(channelId: string, forumThreadId: string): Promise<RestPayload<RestPath<"/channels/{channelId}/topics/{forumTopicId}">["delete"], 204>>;
    /**
     * Pin a topic in a forum
     */
    pinForumTopic(channelId: string, forumThreadId: string): Promise<RestPayload<RestPath<"/channels/{channelId}/topics/{forumTopicId}/pin">["put"], 204>>;
    /**
     * Unpin a topic in a forum
     */
    unpinForumTopic(channelId: string, forumThreadId: string): Promise<RestPayload<RestPath<"/channels/{channelId}/topics/{forumTopicId}/pin">["delete"], 204>>;
    /**
     * Lock a topic in a forum
     */
    lockForumTopic(channelId: string, forumThreadId: string): Promise<RestPayload<RestPath<"/channels/{channelId}/topics/{forumTopicId}/lock">["put"], 204>>;
    /**
     * Unlock a topic in a forum
     */
    unlockForumTopic(channelId: string, forumThreadId: string): Promise<RestPayload<RestPath<"/channels/{channelId}/topics/{forumTopicId}/lock">["delete"], 204>>;
    /**
     * Create a list item.
     */
    createListItem(channelId: string, options: RestBody<RestPath<"/channels/{channelId}/items">["post"]>): Promise<RestPayload<RestPath<"/channels/{channelId}/items">["post"], 201>>;
    /**
     * Get list items
     */
    getListItems(channelId: string): Promise<RestPayload<RestPath<"/channels/{channelId}/items">["get"], 200>>;
    /**
     * Get list item
     */
    getListItem(channelId: string, itemId: string): Promise<RestPayload<RestPath<"/channels/{channelId}/items/{listItemId}">["get"], 200>>;
    /**
     * Update list item
     */
    updateListItem(channelId: string, itemId: string, options: RestBody<RestPath<"/channels/{channelId}/items/{listItemId}">["put"]>): Promise<RestPayload<RestPath<"/channels/{channelId}/items/{listItemId}">["put"], 200>>;
    /**
     * Delete list item
     */
    deleteListItem(channelId: string, itemId: string): Promise<RestPayload<RestPath<"/channels/{channelId}/items/{listItemId}">["delete"], 204>>;
    completeListItem(channelId: string, itemId: string): Promise<RestPayload<RestPath<"/channels/{channelId}/items/{listItemId}/complete">["post"], 204>>;
    uncompleteListItem(channelId: string, itemId: string): Promise<RestPayload<RestPath<"/channels/{channelId}/items/{listItemId}/complete">["delete"], 204>>;
    /**
     * Create a doc.
     */
    createDoc(channelId: string, options: RestBody<RestPath<"/channels/{channelId}/docs">["post"]>): Promise<RestPayload<RestPath<"/channels/{channelId}/docs">["post"], 201>>;
    /**
     * Get the docs from a channel.
     */
    getDocs(channelId: string): Promise<RestPayload<RestPath<"/channels/{channelId}/docs">["get"], 200>>;
    /**
     * Get a doc from a channel.
     */
    getDoc(channelId: string, docId: number): Promise<RestPayload<RestPath<"/channels/{channelId}/docs/{docId}">["get"], 200>>;
    /**
     * Update a doc
     */
    updateDoc(channelId: string, docId: number, options: RestBody<RestPath<"/channels/{channelId}/docs/{docId}">["put"]>): Promise<RestPayload<RestPath<"/channels/{channelId}/docs/{docId}">["put"], 200>>;
    /**
     * Delete a doc from a channel.
     */
    deleteDoc(channelId: string, docId: number): Promise<RestPayload<RestPath<"/channels/{channelId}/docs/{docId}">["delete"], 204>>;
    /**
     * Add a reaction emote
     */
    addReactionEmote(channelId: string, contentId: string, emoteId: number): Promise<RestPayload<RestPath<"/channels/{channelId}/messages/{messageId}/emotes/{emoteId}">["put"], 204>>;
    /**
     * Delete a reaction emote
     */
    deleteReactionEmote(channelId: string, contentId: string, emoteId: number): Promise<RestPayload<RestPath<"/channels/{channelId}/messages/{messageId}/emotes/{emoteId}">["delete"], 204>>;
    /**
     * Award XP to a member
     */
    awardMemberXP(serverId: string, userId: string, amount: number): Promise<RestPayload<RestPath<"/servers/{serverId}/members/{userId}/xp">["post"], 200>>;
    /**
     * Award XP to a role
     */
    awardRoleXP(serverId: string, roleId: string, amount: number): Promise<RestPayload<RestPath<"/servers/{serverId}/roles/{roleId}/xp">["post"], 204>>;
    getMe(): Promise<RestPayload<RestPath<"/users/{userId}">["get"], 200>>;
    /**
     * Retrieves a member's public social links
     */
    getMemberSocialLinks(serverId: string, userId: string, type: Schema<"SocialLink">["type"]): Promise<RestPayload<RestPath<"/servers/{serverId}/members/{userId}/social-links/{socialLinkType}">["get"], 200>>;
    getMember(serverId: string, userId: string): Promise<RestPayload<RestPath<"/servers/{serverId}/members/{userId}">["get"], 200>>;
    getMembers(serverId: string): Promise<RestPayload<RestPath<"/servers/{serverId}/members">["get"], 200>>;
    /**
     * Kick a member from a server
     */
    kickMember(serverId: string, userId: string): Promise<RestPayload<RestPath<"/servers/{serverId}/members/{userId}">["delete"], 204>>;
    /**
     * Ban a member from a server
     */
    banMember(serverId: string, userId: string): Promise<RestPayload<RestPath<"/servers/{serverId}/bans/{userId}">["post"], 200>>;
    /**
     * Retrieve a ban from a server
     */
    getMemberBan(serverId: string, userId: string): Promise<RestPayload<RestPath<"/servers/{serverId}/bans/{userId}">["get"], 200>>;
    /**
     * Unban a member from a server
     */
    unbanMember(serverId: string, userId: string): Promise<RestPayload<RestPath<"/servers/{serverId}/bans/{userId}">["delete"], 204>>;
    /**
     * Get all bans in a server
     */
    getMemberBans(serverId: string): Promise<RestPayload<RestPath<"/servers/{serverId}/bans">["get"], 200>>;
    /**
     * Add member to group
     */
    addMemberToGroup(groupId: string, userId: string): Promise<RestPayload<RestPath<"/groups/{groupId}/members/{userId}">["put"], 204>>;
    /**
     * Remove member from group
     */
    removeMemberFromGroup(groupId: string, userId: string): Promise<RestPayload<RestPath<"/groups/{groupId}/members/{userId}">["delete"], 204>>;
    /**
     * Assign role to member
     */
    assignRoleToMember(serverId: string, userId: string, roleId: number): Promise<RestPayload<RestPath<"/servers/{serverId}/members/{userId}/roles/{roleId}">["put"], 204>>;
    /**
     * Remove role to member
     */
    removeRoleFromMember(serverId: string, userId: string, roleId: number): Promise<RestPayload<RestPath<"/servers/{serverId}/members/{userId}/roles/{roleId}">["delete"], 204>>;
    /**
     * Create a webhook
     */
    createWebhook(serverId: string, options: RestBody<RestPath<"/servers/{serverId}/webhooks">["post"]>): Promise<RestPayload<RestPath<"/servers/{serverId}/webhooks">["post"], 201>>;
    /**
     * Get a server's webhooks
     */
    getWebhooks(serverId: string, channelId?: string): Promise<RestPayload<RestPath<"/servers/{serverId}/webhooks">["get"], 200>>;
    /**
     * Get a webhook
     */
    getWebhook(serverId: string, webhookId: string): Promise<RestPayload<RestPath<"/servers/{serverId}/webhooks/{webhookId}">["get"], 200>>;
    /**
     * Update a webhook
     */
    updateWebhook(serverId: string, webhookId: string, options: RestBody<RestPath<"/servers/{serverId}/webhooks/{webhookId}">["put"]>): Promise<RestPayload<RestPath<"/servers/{serverId}/webhooks/{webhookId}">["put"], 200>>;
    /**
     * Delete a webhook
     */
    deleteWebhook(serverId: string, webhookId: string): Promise<RestPayload<RestPath<"/servers/{serverId}/webhooks/{webhookId}">["delete"], 204>>;
}
//# sourceMappingURL=Router.d.ts.map