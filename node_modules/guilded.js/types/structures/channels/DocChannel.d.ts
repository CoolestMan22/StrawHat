import { Collection } from "@discordjs/collection";
import { Channel } from "./Channel";
import { RestBody, RestPath, Schema } from "@guildedjs/guilded-api-typings";
/**
 * Represents a doc channel on Guilded
 * @extends Channel
 */
export declare class DocChannel extends Channel {
    /**
     * The docs in this channel.
     */
    readonly docs: Collection<number, {
        id: number;
        serverId: string;
        channelId: string;
        title: string;
        content: string;
        mentions?: {
            users?: {
                id: string;
            }[] | undefined;
            channels?: {
                id: string;
            }[] | undefined;
            roles?: {
                id: number;
            }[] | undefined;
            everyone?: boolean | undefined;
            here?: boolean | undefined;
        } | undefined;
        createdAt: string;
        createdBy: string;
        updatedAt?: string | undefined;
        updatedBy?: string | undefined;
    }>;
    /**
     * Create a new doc in this channel.
     * @param options - The options for creating the doc.
     * @returns A promise that resolves with the created doc.
     */
    createDoc(options: RestBody<RestPath<"/channels/{channelId}/docs">["post"]>): Promise<Schema<"Doc">>;
    /**
     * Get all the docs from this channel.
     * @returns A promise that resolves with an array of all docs.
     */
    getDocs(): Promise<Schema<"Doc">[]>;
    /**
     * Get a specific doc from this channel.
     * @param docId - The ID ofSchema<"Doc"> the doc to fetch.
     * @returns A promise that resolves with the fetched doc.
     */
    getDoc(docId: number): Promise<Schema<"Doc">>;
    /**
     * Update a specific doc in this channel.
     * @param docId - The ID of the doc to update.
     * @param options - The options for updating the doc.
     * @returns A promise that resolves with the updated doc.
     */
    updateDoc(docId: number, options: RestBody<RestPath<"/channels/{channelId}/docs/{docId}">["put"]>): Promise<Schema<"Doc">>;
    /**
     * Delete a specific doc from this channel.
     * @param docId - The ID of the doc to delete.
     * @returns A promise that resolves with no data.
     */
    deleteDoc(docId: number): Promise<void>;
}
//# sourceMappingURL=DocChannel.d.ts.map