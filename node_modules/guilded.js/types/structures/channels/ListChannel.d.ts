import { Collection } from "@discordjs/collection";
import { Channel } from "./Channel";
import { Schema } from "@guildedjs/guilded-api-typings";
/**
 * Represents a list channel in Guilded.
 * @extends Channel
 */
export declare class ListChannel extends Channel {
    /**
     * The list items in this channel.
     */
    readonly items: Collection<string, {
        id: string;
        serverId: string;
        channelId: string;
        message: string;
        mentions?: {
            users?: {
                id: string;
            }[] | undefined;
            channels?: {
                id: string;
            }[] | undefined;
            roles?: {
                id: number;
            }[] | undefined;
            everyone?: boolean | undefined;
            here?: boolean | undefined;
        } | undefined;
        createdAt: string;
        createdBy: string;
        createdByWebhookId?: string | undefined;
        updatedAt?: string | undefined;
        updatedBy?: string | undefined;
        parentListItemId?: string | undefined;
        completedAt?: string | undefined;
        completedBy?: string | undefined;
        note?: {
            createdAt: string;
            createdBy: string;
            updatedAt?: string | undefined;
            updatedBy?: string | undefined;
            mentions?: {
                users?: {
                    id: string;
                }[] | undefined;
                channels?: {
                    id: string;
                }[] | undefined;
                roles?: {
                    id: number;
                }[] | undefined;
                everyone?: boolean | undefined;
                here?: boolean | undefined;
            } | undefined;
            content: string;
        } | undefined;
    } | {
        id: string;
        serverId: string;
        channelId: string;
        message: string;
        mentions?: {
            users?: {
                id: string;
            }[] | undefined;
            channels?: {
                id: string;
            }[] | undefined;
            roles?: {
                id: number;
            }[] | undefined;
            everyone?: boolean | undefined;
            here?: boolean | undefined;
        } | undefined;
        createdAt: string;
        createdBy: string;
        createdByWebhookId?: string | undefined;
        updatedAt?: string | undefined;
        updatedBy?: string | undefined;
        parentListItemId?: string | undefined;
        completedAt?: string | undefined;
        completedBy?: string | undefined;
        note?: {
            createdAt: string;
            createdBy: string;
            updatedAt?: string | undefined;
            updatedBy?: string | undefined;
        } | undefined;
    }>;
    /**
     * Creates a list item in this channel.
     * @param message - The message of the new list item.
     * @param note - Optional note for the new list item.
     * @returns A Promise that resolves with the newly created list item payload.
     */
    createItem(message: string, note?: string): Promise<Schema<"ListItem">>;
    /**
     * Fetches a list item by its ID.
     * @param itemId - The ID of the list item to fetch.
     * @returns A Promise that resolves with the list item payload.
     */
    getItem(itemId: string): Promise<Schema<"ListItem">>;
    /**
     * Fetches all list items in this channel.
     * @returns A Promise that resolves with an array of list item summary payloads.
     */
    getItems(): Promise<Schema<"ListItemSummary">[]>;
    /**
     * Completes a list item.
     * @param itemId - The ID of the list item to complete.
     * @returns A Promise that resolves when the list item is completed.
     */
    completeItem(itemId: string): Promise<void>;
    /**
     * Uncompletes a list item.
     * @param itemId - The ID of the list item to uncomplete.
     * @returns A Promise that resolves when the list item is uncompleted.
     */
    uncompleteItem(itemId: string): Promise<void>;
}
//# sourceMappingURL=ListChannel.d.ts.map